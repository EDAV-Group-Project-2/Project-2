for (i in 0:ani.options("nmax") - 1) {
z = api.array[i * 2160:i * 2160 + 2160]
ggplot() + geom_polygon(aes(long,lat, group=group), fill="grey65", data=map.dat) + theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) + geom_point(aes(x=x, y=y, show_guide=TRUE, color=z), data=df, alpha=.5, na.rm=T) + scale_color_gradient(low='beige', high='blue')
ani.pause() ## pause for a while ('interval')
}
z = phi.array[1:2160]
for (i in 0:ani.options("nmax") - 1) {
z = phi.array[i * 2160:i * 2160 + 2160]
ggplot() + geom_polygon(aes(long,lat, group=group), fill="grey65", data=map.dat) + theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) + geom_point(aes(x=x, y=y, show_guide=TRUE, color=z), data=df, alpha=.5, na.rm=T) + scale_color_gradient(low='beige', high='blue')
ani.pause() ## pause for a while ('interval')
}
for (i in 0:ani.options("nmax")) {
z = phi.array[i * 2160:i * 2160 + 2160]
ggplot() + geom_polygon(aes(long,lat, group=group), fill="grey65", data=map.dat) + theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) + geom_point(aes(x=x, y=y, show_guide=TRUE, color=z), data=df, alpha=.5, na.rm=T) + scale_color_gradient(low='beige', high='blue')
ani.pause() ## pause for a while ('interval')
}
ggplot() + geom_polygon(aes(long,lat, group=group), fill="grey65", data=map.dat) + theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) + geom_point(aes(x=x, y=y, show_guide=TRUE, color=z), data=df, alpha=.5, na.rm=T) + scale_color_gradient(low='beige', high='blue')
ggplot() + geom_polygon(aes(long,lat, group=group), fill="grey65", data=map.dat) + theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) + geom_point(aes(x=x, y=y, show_guide=TRUE, color=z), data=df, alpha=.9, na.rm=T) + scale_color_gradient(low='beige', high='blue')
ggplot()
+ geom_polygon(aes(long,lat, group=group),
fill="grey65", data=map.dat)
+ theme_bw() + theme(axis.text = element_blank(),
axis.title=element_blank())
+ geom_point(aes(x=x, y=y, show_guide=TRUE, color=z),
data=df, alpha=.9, na.rm=T)
+ scale_color_gradient(low='beige', high='blue')
+ theme_bw() + theme(axis.text = element_blank(),
axis.title=element_blank())
+ geom_point(aes(x=x, y=y, show_guide=TRUE, color=z),
data=df, alpha=.9, na.rm=T)
ggplot()
+ geom_polygon(aes(long,lat, group=group),
fill="grey65", data=map.dat)
ggplot() + geom_polygon(aes(long,lat, group=group), fill="grey65", data=map.dat) + theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) + geom_point(aes(x=x, y=y, show_guide=TRUE, color=z), data=df, alpha=.9, na.rm=T) + scale_color_gradient(low='beige', high='blue')
plot('Pyx')
library(ggplot2)
setwd('~/Desktop/Columbia/EDAV/Project2')
# Load the data
ncname <- "NOAA_Daily_phi_500mb"
ncfname <- paste(ncname, ".nc", sep = "")
dname <- "phi" #For variable name phi
ncin <- nc_open(ncfname)
lon <- ncvar_get(ncin, "X")
lat <- ncvar_get(ncin, "Y", verbose = F)
time_var <- ncvar_get(ncin, "T")
tunits <- ncatt_get(ncin, "T", "units")
phi.array[phi.array == dmissing_value$value] <- NA
phi.array <- ncvar_get(ncin, dname)
x = rep(0:143 * 2.5 - 180, times=15)
y = rep(0:14 * 2.5 + 35, each=144)
z = phi.array[1:2160]
df = data.frame(y, x, z)
ggplot(aes(x=x,y=y,fill=z),data=df) + geom_tile()
ggplot() + geom_polygon(aes(long,lat, group=group), fill="grey65", data=map.dat) + theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) + geom_point(aes(x=x, y=y, show_guide=TRUE, color=z), data=df, alpha=.9, na.rm=T) + scale_color_gradient(low='beige', high='blue')
(aes(long,lat, group=group), fill="grey65", data=map.dat) + theme_bw() +
theme(axis.text = el
ggplot() + geom_polygon(aes(long,lat, group=group), fill="grey65", data=map.dat)
+ theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank())
+ geom_point(aes(x=x, y=y, show_guide=TRUE, color=z), data=df, alpha=.9, na.rm=T)
+ scale_color_gradient(low='beige', high='blue')
ggplot() + geom_polygon(aes(long, lat, group=group), fill="grey65", data=map.dat)
+ theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank())
+ geom_point(aes(x=x, y=y, show_guide=TRUE, color=z), data=df, alpha=.9, na.rm=T)
+ scale_color_gradient(low='beige', high='blue')
ggplot() + geom_polygon(aes(long, lat, group=group), fill="grey65", data=map.dat) +
theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) +
geom_point(aes(x=x, y=y, show_guide=TRUE, color=z), data=df, alpha=.9, na.rm=T) +
scale_color_gradient(low='beige', high='blue')
ggplot() + geom_polygon(aes(long, lat, group=group), fill="grey65", data=map.dat) +
theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) +
geom_point(aes(x=x, y=y, show_guide=TRUE, color=z, size=20), data=df, alpha=.9, na.rm=T) +
scale_color_gradient(low='beige', high='blue')
ggplot() + geom_polygon(aes(long, lat, group=group), fill="grey65", data=map.dat) +
theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) +
geom_point(aes(x=x, y=y, show_guide=TRUE, color=z, size=15), data=df, alpha=.9, na.rm=T) +
scale_color_gradient(low='beige', high='blue')
ggplot() + geom_polygon(aes(long, lat, group=group), fill="grey65", data=map.dat) +
theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) +
geom_point(aes(x=x, y=y, show_guide=TRUE, color=z, size=15), data=df, alpha=.1, na.rm=T) +
scale_color_gradient(low='beige', high='blue')
ggplot() + geom_polygon(aes(long, lat, group=group), fill="grey65", data=map.dat) +
theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) +
geom_point(aes(x=x, y=y, show_guide=TRUE, color=z, size=14), data=df, alpha=.2, na.rm=T) +
scale_color_gradient(low='beige', high='blue')
ggplot() + geom_polygon(aes(long, lat, group=group), fill="grey65", data=map.dat) +
theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) +
geom_point(aes(x=x, y=y, show_guide=TRUE, color=z, size=14), data=df, alpha=.3, na.rm=T) +
scale_color_gradient(low='beige', high='blue')
ggplot() + geom_polygon(aes(long, lat, group=group), fill="grey65", data=map.dat) +
theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) +
geom_point(aes(x=x, y=y, show_guide=TRUE, color=z, size=14), data=df, alpha=.7, na.rm=T) +
scale_color_gradient(low='beige', high='blue')
library(ggplot2)
setwd('~/Desktop/Columbia/EDAV/Project2')
ncname <- "NOAA_Daily_phi_500mb"
ncfname <- paste(ncname, ".nc", sep = "")
dname <- "phi" #For variable name phi
ncin <- nc_open(ncfname)
lon <- ncvar_get(ncin, "X")
lat <- ncvar_get(ncin, "Y", verbose = F)
time_var <- ncvar_get(ncin, "T")
tunits <- ncatt_get(ncin, "T", "units")
phi.array[phi.array == dmissing_value$value] <- NA
phi.array <- ncvar_get(ncin, dname)
x = rep(0:143 * 2.5 - 180, times=15)
y = rep(0:14 * 2.5 + 35, each=144)
# Take first
z = phi.array[2161:2160+2160]
df = data.frame(y, x, z)
ggplot(aes(x=x,y=y,fill=z),data=df) + geom_tile()
ggplot() + geom_polygon(aes(long, lat, group=group), fill="grey65", data=map.dat) +
theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) +
geom_point(aes(x=x, y=y, show_guide=TRUE, color=z, size=14), data=df, alpha=.7, na.rm=T) +
scale_color_gradient(low='beige', high='blue')
library(ggplot2)
setwd('~/Desktop/Columbia/EDAV/Project2')
ncname <- "NOAA_Daily_phi_500mb"
ncfname <- paste(ncname, ".nc", sep = "")
dname <- "phi" #For variable name phi
ncin <- nc_open(ncfname)
lon <- ncvar_get(ncin, "X")
lat <- ncvar_get(ncin, "Y", verbose = F)
time_var <- ncvar_get(ncin, "T")
tunits <- ncatt_get(ncin, "T", "units")
phi.array[phi.array == dmissing_value$value] <- NA
phi.array <- ncvar_get(ncin, dname)
x = rep(0:143 * 2.5 - 180, times=15)
y = rep(0:14 * 2.5 + 35, each=144)
# Take first
z = phi.array[2161:4320]
df = data.frame(y, x, z)
ggplot(aes(x=x,y=y,fill=z),data=df) + geom_tile()
ggplot() + geom_polygon(aes(long, lat, group=group), fill="grey65", data=map.dat) +
theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) +
geom_point(aes(x=x, y=y, show_guide=TRUE, color=z, size=14), data=df, alpha=.7, na.rm=T) +
scale_color_gradient(low='beige', high='blue')
library(ggplot2)
setwd('~/Desktop/Columbia/EDAV/Project2')
ncname <- "NOAA_Daily_phi_500mb"
ncfname <- paste(ncname, ".nc", sep = "")
dname <- "phi" #For variable name phi
ncin <- nc_open(ncfname)
lon <- ncvar_get(ncin, "X")
lat <- ncvar_get(ncin, "Y", verbose = F)
time_var <- ncvar_get(ncin, "T")
tunits <- ncatt_get(ncin, "T", "units")
phi.array[phi.array == dmissing_value$value] <- NA
phi.array <- ncvar_get(ncin, dname)
x = rep(0:143 * 2.5 - 180, times=15)
y = rep(0:14 * 2.5 + 35, each=144)
# Take first
z = phi.array[1:2160]
df = data.frame(y, x, z)
ggplot(aes(x=x,y=y,fill=z),data=df) + geom_tile()
ggplot() + geom_polygon(aes(long, lat, group=group), fill="grey65", data=map.dat) +
theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) +
geom_point(aes(x=x, y=y, show_guide=TRUE, color=z, size=14), data=df, alpha=.7, na.rm=T) +
scale_color_gradient(low='beige', high='blue')
y = rep(0:14 * 2.5 + 35, each=144)
library(ggplot2)
setwd('~/Desktop/Columbia/EDAV/Project2')
ncname <- "NOAA_Daily_phi_500mb"
ncfname <- paste(ncname, ".nc", sep = "")
dname <- "phi" #For variable name phi
ncin <- nc_open(ncfname)
lon <- ncvar_get(ncin, "X")
lat <- ncvar_get(ncin, "Y", verbose = F)
time_var <- ncvar_get(ncin, "T")
tunits <- ncatt_get(ncin, "T", "units")
phi.array[phi.array == dmissing_value$value] <- NA
phi.array <- ncvar_get(ncin, dname)
x = rep(0:143 * 2.5 - 180, times=15)
y = rep(0:14 * 2.5 + 35, each=144)
# Take first
z = phi.array[2161:4320]
df = data.frame(y, x, z)
ggplot(aes(x=x,y=y,fill=z),data=df) + geom_tile()
ggplot() + geom_polygon(aes(long, lat, group=group), fill="grey65", data=map.dat) +
theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) +
geom_point(aes(x=x, y=y, show_guide=TRUE, color=z, size=14), data=df, alpha=.7, na.rm=T) +
scale_color_gradient(low='beige', high='blue')
ggplot() +
geom_point(aes(x=x, y=y, show_guide=TRUE, color=z, size=14), data=df, alpha=.7, na.rm=T) +
scale_color_gradient(low='beige', high='blue')
library(ggplot2)
setwd('~/Desktop/Columbia/EDAV/Project2')
ncname <- "NOAA_Daily_phi_500mb"
ncfname <- paste(ncname, ".nc", sep = "")
dname <- "phi" #For variable name phi
ncin <- nc_open(ncfname)
lon <- ncvar_get(ncin, "X")
lat <- ncvar_get(ncin, "Y", verbose = F)
time_var <- ncvar_get(ncin, "T")
tunits <- ncatt_get(ncin, "T", "units")
phi.array[phi.array == dmissing_value$value] <- NA
phi.array <- ncvar_get(ncin, dname)
x = rep(0:143 * 2.5 - 180, times=15)
y = rep(0:14 * 2.5 + 35, each=144)
# Take first
z = phi.array[2161:4320]
df = data.frame(y, x, z)
ggplot(aes(x=x,y=y,fill=z),data=df) + geom_tile()
ggplot() + geom_polygon(aes(long, lat, group=group), fill="grey65", data=map.dat) +
theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) +
geom_point(aes(x=x, y=y, show_guide=TRUE, color=z, size=14), data=df, alpha=.7, na.rm=T) +
scale_color_gradient(low='beige', high='blue')
pca = princomp(df, scores=TRUE, cor=TRUE)
summary(pca)
colnames(df) = c('Lat', 'Lon', 'Phi')
pca = princomp(df, scores=TRUE, cor=TRUE)
summary(pca)
plot(pca)
biplot(pca)
pca$loadings
summary(pca)
df$log
df$lon
colnames(df) = c('Lon', 'Lat', 'Phi')
pca = princomp(df, scores=TRUE, cor=TRUE)
summary(pca)
plot(pca)
biplot(pca)
pca$loadings
colnames(df) = c('Lat', 'Lon', 'Phi')
pca = princomp(df, scores=TRUE, cor=TRUE)
summary(pca)
plot(pca)
biplot(pca)
pca$loadings
summary(pca)
colnames(df) = c('Lat', 'Lon', 'Phi')
pca = princomp(df, scores=TRUE, cor=TRUE, center=TRUE, scale=TRUE)
summary(pca)
plot(pca)
biplot(pca)
pca$loadings
ggbiplot(pca)
install.packages('ggbiplot')
library(devtools)
install.packages(devtools)
install.packages('devtools'')
install.packages('devtools'')''
install.packages('devtools')
library(devtools)
install_github("vqv/ggbiplot")
ggbiplot(pca)
library(ggbiplot)
ggbiplot(pca)
library(ggplot2)
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
setwd('~/Desktop/Columbia/EDAV/Project2')
ncname <- "NOAA_Daily_phi_500mb"
ncfname <- paste(ncname, ".nc", sep = "")
dname <- "phi" #For variable name phi
ncin <- nc_open(ncfname)
lon <- ncvar_get(ncin, "X")
lat <- ncvar_get(ncin, "Y", verbose = F)
time_var <- ncvar_get(ncin, "T")
tunits <- ncatt_get(ncin, "T", "units")
phi.array[phi.array == dmissing_value$value] <- NA
phi.array <- ncvar_get(ncin, dname)
x = rep(0:143 * 2.5 - 180, times=15)
y = rep(0:14 * 2.5 + 35, each=144)
# Take first
z = phi.array[2161:4320]
df = data.frame(y, x, z)
ggplot(aes(x=x,y=y,fill=z),data=df) + geom_tile()
ggplot() + geom_polygon(aes(long, lat, group=group), fill="grey65", data=map.dat) +
theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) +
geom_point(aes(x=x, y=y, show_guide=TRUE, color=z, size=14), data=df, alpha=.7, na.rm=T) +
scale_color_gradient(low='beige', high='blue')
colnames(df) = c('Lat', 'Lon', 'Phi')
pca = princomp(df, scores=TRUE, cor=TRUE, center=TRUE, scale=TRUE)
summary(pca)
plot(pca)
ggbiplot(pca)
pca$loadings
ggbiplot(pca)
ggplot() + geom_polygon(aes(long, lat, group=group), fill="grey65", data=map.dat) +
theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) +
geom_point(aes(x=x, y=y, show_guide=TRUE, color=z, size=14), data=df, alpha=.7, na.rm=T) +
scale_color_gradient(low='beige', high='blue')
ggplot() + geom_polygon(aes(long, lat, group=group), fill="grey65", data=map.dat) +
theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) +
geom_point(aes(x=x, y=y, show_guide=TRUE, color=z, size=14), data=df, alpha=.7, na.rm=T) +
scale_color_gradient(low='beige', high='blue')
map.dat <- map_data("world")
ggplot() + geom_polygon(aes(long, lat, group=group), fill="grey65", data=map.dat) +
theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) +
geom_point(aes(x=x, y=y, show_guide=TRUE, color=z, size=14), data=df, alpha=.7, na.rm=T) +
scale_color_gradient(low='beige', high='blue')
ggbiplot(pca)
library(ggbiplot)
library(scales)
ggplot() + geom_polygon(aes(long, lat, group=group), fill="grey65", data=map.dat) +
theme_bw() + theme(axis.text = element_blank(), axis.title=element_blank()) +
geom_point(aes(x=x, y=y, show_guide=TRUE, color=z, size=13), data=df, alpha=.7, na.rm=T) +
scale_color_gradient(low='beige', high='blue')
summary(pca)
biplot(pca)
pairs(df)
df$Lon
df$Lat
plot(pca)
summary(pca)
pca$loadings
biplot(pca)
biplot(pca, expand=10, xlim=c(-0.30, 0.0), ylim=c(-0.1, 0.1))
biplot(pca, expand=10, xlim=c(-0.05, 0.05), ylim=c(-0.05, 0.05))
biplot(pca, expand=1, xlim=c(-0.05, 0.05), ylim=c(-0.05, 0.05))
biplot(pca, expand=1, xlim=c(-0.05, 0.05), ylim=c(-0.05, 0.05))
biplot(pca, expand=2, xlim=c(-0.05, 0.05), ylim=c(-0.05, 0.05))
biplot(pca, expand=.5, xlim=c(-0.05, 0.05), ylim=c(-0.05, 0.05))
biplot(pca, expand=1, xlim=c(-0.05, 0.05), ylim=c(-0.05, 0.05))
biplot(pca, expand=2, xlim=c(-0.05, 0.05), ylim=c(-0.05, 0.05))
biplot(pca, expand=1.5, xlim=c(-0.05, 0.05), ylim=c(-0.05, 0.05))
biplot(pca, expand=1, xlim=c(-0.05, 0.05), ylim=c(-0.05, 0.05))
summary(pca)
nc
ncin
ncin$var$phi
ncin$dim$T
ncin$dim$T[1]
ncin$dim$T[16]
ncin$dim$T[12]
ncin$dim$T[3]
ncin$dim$T$vals
tail(ncin$dim$T$vals, n=1)
ncin$dim$T$vals[1]
ncin$dim$T$vals[2]
ncin$dim$T$vals[30]
ncin$dim$X$vals[30]
ncin$dim$X$vals[31]
ncin$dim$X$vals[32]
ncin$dim$X$vals[33]
ncin$dim$X$vals[34]
ncin$dim$X$vals[50]
ncin$dim$X$vals[70]
ncin$dim$X$vals[80]
ncin$dim$X$vals[90]
ncin$dim$X$vals[1]
ncin$dim$X$vals[2]
ncin$dim$X$vals[360/2.5]
ncin$dim$Y$vals[1]
ncin$dim$Y$vals[15]
ncin$dim$Y$vals[16]
ncin$dim$phi$vals[16]
ncin$var$phi$vals[16]
ncin$var$phi$val
ncin$var$phi$vals
ncin$var$phi
ncin$var$phi[1]
ncin$var$phi[12]
ncin$var$phi[2]
ncin$var$phi[3]
ncin$var$phi[4]
ncin$var$phi[5]
ncin$var$phi[6]
ncin$var$phi[7]
ncin$var$phi[8]
ncin$var$phi[9]
ncin$var$phi[10]
ncin$var$phi[1]
ncin$var$phi[11]
ncin$var$phi[12]
ncin$var$phi[13]
ncin$var$phi[14]
ncin$var$phi[15]
ncin$var$phi[16]
ncin$var$phi$vals
ncin$var$phi[16]
name(ncin$var$phi[16])
ncin$var$phi[16]
ncin$var$phi[16][1]
ncin$var$phi$vals[16]
ncin$var$phi$vals
ncin$var$phi[16]
ncin$var$phi[16]$vals
length(ncin$var$phi[16])
length(ncin$var$phi[16])
length(ncin$var$phi)
length(ncin$var$phi$vals)
ncin$var$phi$vals
z
ncvar_get(ncin, dname)
phi.array <- ncvar_get(ncin, dname)
dim(phi.array)
24873/144
df = read.csv('GlobalFloodsRecord.csv', fileEncoding="macroman", stringsAsFactors = FALSE)
df = read.csv('GlobalFloodsRecord.csv', fileEncoding="macroman", stringsAsFactors = FALSE)
fix.index = c(2,8,22,30)
num.cols = c(2,12,13,14,15,17,18,19,20,21)
df[,num.cols] <- sapply(df[,num.cols], as.numeric)
df$X <- NULL
world <- map_data("world")
worldmap <- ggplot() + geom_polygon(data=world, aes(long,lat, group=group), fill="grey65") +
coord_quickmap() +
geom_point(data=df, aes(x=Centroid.X, y=Centroid.Y), size=1, alpha=0.3)
worldmap
worldmap <- ggplot() + borders("world", colour="gray50", fill="gray50") +
geom_point(data=df, aes(x=Centroid.X, y=Centroid.Y, color="red", fill="red"), size=1, alpha=0.3)
worldmap
df2 = read.csv('GlobalFloodsRecord.csv', fileEncoding="macroman", stringsAsFactors = FALSE)
# Fix dataset
fix.index = c(2,8,22,30)
colnames(df2)[fix.index] = c("Annual.DFO", "Detailed.Locations", "News", "Notes")
num.cols = c(2,12,13,14,15,17,18,19,20,21)
df2[,num.cols] <- sapply(df2[,num.cols], as.numeric)
df2$X <- NULL
df2$X.1
df2$X
df2$X[1]
df2$Centroid.X
df2$Centroid.X + 180
df2$Centroid.X
df2$Centroid.X = df2$Centroid.X + 180
df2$Centroid.Y
which(x == min(df2$Y))
which(x == min(df2$Y))
df2$Centroid.Y
df2$Centroid.Centroid.Y
df2$Centroid.Y
min(df2$Centroid.Y)
which(x == min(df2$Centroid.Y))
which(x == max(df2$Centroid.Y))
which.min(df$Centroid.X)
which.max(df$Centroid.X)
which.max(df$Centroid.Y)
which.min(df$Centroid.Y)
min(df$Centroid.X)
min(df)
''
min(df$Centroid.X)
df$Centroid.X
min(df$Centroid.X, na.rm=TRUE)
max(df$Centroid.X, na.rm=TRUE)
max(df$Centroid.Y, na.rm=TRUE)
min(df$Centroid.Y, na.rm=TRUE)
df2$Centroid.X = df2$Centroid.X + 180
min(df$Centroid.X, na.rm=TRUE)
max(df$Centroid.X, na.rm=TRUE)
df2$Centroid.X = df2$Centroid.X + 180
max(df2$Centroid.X, na.rm=TRUE)
df2 = read.csv('GlobalFloodsRecord.csv', fileEncoding="macroman", stringsAsFactors = FALSE)
# Fix dataset
fix.index = c(2,8,22,30)
colnames(df2)[fix.index] = c("Annual.DFO", "Detailed.Locations", "News", "Notes")
num.cols = c(2,12,13,14,15,17,18,19,20,21)
df2[,num.cols] <- sapply(df2[,num.cols], as.numeric)
df2$X <- NULL
max(df2$Centroid.X, na.rm=TRUE)
df2$Centroid.X = df2$Centroid.X + 180
max(df2$Centroid.X, na.rm=TRUE)
min(df2$Centroid.X, na.rm=TRUE)
df2$Began
df2$Ended
df2$newDate <- as.Date(df$Began, "%d-%m-%Y")
df2$newDate
df2$newDate <- as.Date(df$Began, "%e-%b-%y")
df2$newDate
df$Date.Began
Diff <- function(x, start) as.numeric(x - as.Date(cut(start, "year")))
transform(df2, NumDays = Diff(Date, Date), TotalDays = Diff(Date, ""))
Diff <- function(x, start) as.numeric(x - as.Date('1948')
)
Diff <- function(x, start) as.numeric(x - as.Date('1948'))
transform(df2, NumDays = Diff(Date, Date), TotalDays = Diff(Date))
library(Date)
transform(df2, NumDays = Diff(Date), TotalDays = Diff(Date))
transform(df2, NumDays = Diff(Date), TotalDays = Diff(Date))
Diff <- function(x, start) as.numeric(x - as.Date('1948'))
transform(df2, NumDays = Diff(Date), TotalDays = Diff(Date))
transform(df2, NumDays = Diff(newDate), TotalDays = Diff(newDate))
Diff <- function(x, start) as.numeric(x - as.Date('01-01-1948'))
transform(df2, NumDays = Diff(newDate), TotalDays = Diff(newDate))
df2$newDate
df2$numDays
df2$totalDays
df2$TotalDays
df2$DiffDays
df2$NumDays
Diff <- function(x, start) as.numeric(x - as.Date('01-01-1948'))
Diff <- function(x) as.numeric(x - as.Date('01-01-1948'))
transform(df2, NumDays = Diff(newDate))
df2 = transform(df2, NumDays = Diff(newDate))
min(df2$numDays)
df2$NumDays
length(df2$begin)
length(df2$Began)
length(df2$NumDays)
ncname <- "NOAA_Daily_phi_500mb"
ncfname <- paste(ncname, ".nc", sep = "")
dname <- "phi" #For variable name phi
ncin <- nc_open(ncfname)
lon <- ncvar_get(ncin, "X")
lat <- ncvar_get(ncin, "Y", verbose = F)
time_var <- ncvar_get(ncin, "T")
tunits <- ncatt_get(ncin, "T", "units")
phi.array[phi.array == dmissing_value$value] <- NA
phi.array <- ncvar_get(ncin, dname)
x = rep(0:143 * 2.5 - 180, times=15)
y = rep(0:14 * 2.5 + 35, each=144)
# Take first
z = phi.array[2161:4320]
df = data.frame(y, x, z)
library(ggplot2)
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
setwd('~/Desktop/Columbia/EDAV/Project2')
